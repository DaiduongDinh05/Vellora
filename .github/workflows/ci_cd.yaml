name: CI/CD

on:
  pull_request:
    branches: [qa, main]

jobs:
  # Job 1: Filter changed files and set outputs for backend and frontend changes
  paths:
    name: Determine Changed Paths
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v3
      - name: Filter changed paths
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'

  # Job 2: Run backend tests/deployment if backend files changed
  backend_basic_checks:
    name: Backend Basic Checks
    needs: paths
    if: ${{ needs.paths.outputs.backend == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Set up Python and install dependencies
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install backend dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-test.txt ]; then pip install -r requirements-test.txt; fi
      
      - name: Run Backend Tests
        working-directory: backend
        run: |
          echo "Running backend tests..."
          echo "Backend tests completed."

  # Job 3: Run frontend deployment if frontend files changed
  frontend_basic_checks:
    name: Frontend Basic Checks
    needs: paths
    if: ${{ needs.paths.outputs.frontend == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
  
      # Add any frontend build/test steps if needed.
      - name: Install Frontend Dependencies
        working-directory: frontend
        run: |
          npm ci

      - name: Run ESLint
        working-directory: frontend
        run: npm run lint

      - name: Check TypeScript types
        working-directory: frontend
        run: npx tsc --noEmit
  
  regression_tests:
    name: Regression Tests
    needs: [backend_basic_checks, frontend_basic_checks]
    if: github.base_ref == 'qa'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run Regression Tests
        run: |
          echo "Running regression tests..."
          # Add your regression test commands here when you have them
          echo "QA tests done, merging..."

  main_branch_check:
    name: Main Branch Merge Protection
    if: github.base_ref == 'main'
    runs-on: ubuntu-latest
    steps:
      - name: Verify QA Branch
        run: |
          if [[ "${{ github.head_ref }}" != "qa" ]]; then
            echo "Error: Can only merge to main from qa branch"
            exit 1
          fi
  
  deploy_production:
    name: Deploy to Production
    needs: [backend_basic_checks, frontend_basic_checks, regression_tests]
    permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::260125007066:role/GitHubActions  # Update with correct ARN
          aws-region: us-east-2
          role-session-name: gha-${{ github.run_id }}
      - name: Sts GetCallerIdentity
        run: |
          aws sts get-caller-identity

      - name: AWS ECR Login
        run: |
          aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 260125007066.dkr.ecr.us-east-2.amazonaws.com

      - name: Build, Tag, and Push Docker Image
        working-directory: backend
        run: |
          docker build -t vellora/backend .
          docker tag vellora/backend:latest 260125007066.dkr.ecr.us-east-2.amazonaws.com/vellora/backend:latest
          docker push 260125007066.dkr.ecr.us-east-2.amazonaws.com/vellora/backend:latest

      - name: Delete old images from ECR
        run: |
          aws ecr list-images --repository-name vellora/backend --query "imageIds[?imageTag!='latest'].[imageTag]" --output text | \
          while read IMAGE_TAG; do
            aws ecr batch-delete-image --repository-name vellora/backend --image-ids imageTag=$IMAGE_TAG
          done

      - name: Deploy to EC2 with SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.KEY }}
          port: 22
          script: |
            echo "Running command"
            whoami

